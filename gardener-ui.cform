{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Gardener APIs",
    "Metadata": {

    },
    "Parameters": {
        "IotThingName":{
            "Type": "String",
            "Description": "Name of the existing Gardener IoT thing",
            "Default": "esp8266-gardener"
        },
        "IotSubdomain":{
            "Type": "String",
            "Default": "a14bdnvwk8zpaa"
        },
        "CognitoUserPool": {
            "Type": "String",
            "Description": "The ARN for your Cognito user pool",
            "Default": "arn:aws:cognito-idp:us-east-1:440391788341:userpool/us-east-1_XhnjRllOF"
        }
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
        "GardenerApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "Gardener API",
                "Description": "API used to work with remote Gardener"
            }
        },

        "GardenerApiStage": {
            "DependsOn": "ApiGatewayAccount",
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {"Ref": "ApiDeployment"},
                "MethodSettings": [{
                    "DataTraceEnabled": true,
                    "HttpMethod": "*",
                    "LoggingLevel": "INFO",
                    "ResourcePath": "/*"
                }],
                "RestApiId": {"Ref": "GardenerApi"},
                "StageName": "PROD"
            }
        },

        "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": ["apigateway.amazonaws.com"] },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [{
                    "PolicyName": "ApiGatewayLogsPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "logs:GetLogEvents",
                                "logs:FilterLogEvents"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "GardenerApiRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": ["apigateway.amazonaws.com"] },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [{
                    "PolicyName": "GardenerAPIPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action":[
                                "iot:GetThingShadow",
                                "iot:UpdateThingShadow"
                            ],
                            "Resource": {
                                "Fn::Join": ["/", [
                                    { "Fn::Join": [":", ["arn:aws:iot", {"Ref": "AWS::Region"}, {"Ref": "AWS::AccountId"}, "thing"]] },
                                    { "Ref": "IotThingName" }
                                ]]
                            }
                        }]
                    }
                }]
            }
        },

        "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": { "Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
            }
        },

        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": ["GetThingRequest", "UpdateThingRequest", "OptionsRequest"],
            "Properties": {
                "RestApiId": {"Ref": "GardenerApi"},
                "StageName": "DummyStage"
            }
        },

        "GardenerResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {"Ref": "GardenerApi"},
                "ParentId": {"Fn::GetAtt": ["GardenerApi", "RootResourceId"]},
                "PathPart": "gardener"
            }
        },

        "GetThingRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {"Ref": "GardenerAuthorizer"},
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Uri": {
                        "Fn::Join": [":", 
                            [
                                "arn:aws:apigateway", 
                                {"Ref": "AWS::Region"}, 
                                {"Fn::Join": [".", [{"Ref": "IotSubdomain"}, "iotdata"]]},
                                {"Fn::Join": ["/", ["path/things", {"Ref": "IotThingName"}, "shadow"]]}
                            ]
                        ]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }],
                    "Credentials": { "Fn::GetAtt": ["GardenerApiRole", "Arn"] }
                },
                "ResourceId": {"Ref": "GardenerResource"},
                "RestApiId": {"Ref": "GardenerApi"},
                "MethodResponses": [{
                    "StatusCode": 200,
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": false
                    }
                }]
            }
        },

        "UpdateThingRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {"Ref": "GardenerAuthorizer"},
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [":", 
                            [
                                "arn:aws:apigateway", 
                                {"Ref": "AWS::Region"}, 
                                {"Fn::Join": [".", [{"Ref": "IotSubdomain"}, "iotdata"]]},
                                {"Fn::Join": ["/", ["path/things", {"Ref": "IotThingName"}, "shadow"]]}
                            ]
                        ]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                    }],
                    "Credentials": { "Fn::GetAtt": ["GardenerApiRole", "Arn"] }
                },
                "ResourceId": {"Ref": "GardenerResource"},
                "RestApiId": {"Ref": "GardenerApi"},
                "MethodResponses": [{
                    "StatusCode": 200,
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": false
                    }
                }]
            }
        },

        "OptionsRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "RestApiId": {"Ref": "GardenerApi"},
                "ResourceId": {"Ref": "GardenerResource"},
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-cognito-auth'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "ResponseTemplates": {
                                "application/json": ""
                            }
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "RequestTemplates": {
                        "application/json": "{'statusCode': 200}"
                    },
                    "Type": "MOCK"
                },
                "MethodResponses": [{
                    "StatusCode": 200,
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": false,
                        "method.response.header.Access-Control-Allow-Methods": false,
                        "method.response.header.Access-Control-Allow-Origin": false
                    }
                }]
            }
        },

        "GardenerAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
                "Type": "COGNITO_USER_POOLS",
                "ProviderARNs": [{"Ref": "CognitoUserPool"}],
                "IdentitySource": "method.request.header.x-cognito-auth",
                "Name": "CognitoAuth",
                "RestApiId": {"Ref": "GardenerApi"}
            }
        }
    },
    "Outputs": {
        "ApiUrl": {
            "Value": {
                "Fn::Join": [
                    "/", [
                        {
                            "Fn::Join": [
                                ".", [
                                    {"Fn::Join": ["", ["https://", {"Ref": "GardenerApi"}]]},
                                    "execute-api",
                                    {"Ref": "AWS::Region"},
                                    {"Ref": "AWS::URLSuffix"}
                                ]
                            ]
                        },
                        {"Ref": "GardenerApiStage"}
                    ]
                ]
            }
        }
    }
}